3.1 内存中字的存储： 字单元；

3.2 DS和[address]： 
    DS：存放数据的段地址；
    mov指令可完成两种传送：（1）将数据直接送入寄存器；（2）将一个寄存器中的内容送入另一个寄存器；（3）将一个内存单元中的内容送入一个寄存器中，8086 CPU自动取DS中的数据作为内存单元的段地址；
    []: 在mov指令中，该符号说明操作对象是一个内存单元；
    8086 CUP不支持将数据直接送入段寄存器的操作；
    
3.3 字的传送：

3.4 mov、add、sub指令：
    mov指令几种形式：
            mov     寄存器，    数据
            mov     寄存器，    寄存器
            mov     寄存器，    内存单元
            mov     内存单元，   寄存器
            mov     段寄存器，   寄存器     <==>    mov     寄存器，    段寄存器
    add和sub指令同mov一样，都有两个操作对象：
            add     寄存器，    数据
            add     寄存器，    寄存器
            add     寄存器，    内存单元
            add     内存单元，   寄存器
            sub     寄存器，    数据
            sub     寄存器，    寄存器
            sub     寄存器，    内存单元
            sub     内存单元，   寄存器
            
3.5 数据段：

3.6 栈：
    栈是一种具有特殊的访问方式的存储空间。它的特殊性就在于，最后进入这个空间的数据，最先出去；
    栈有两个基本操作：入栈和出栈；
    操作规则：LIFO(last in first out);
    
3.7 CPU提供的栈机制：
    指令：PUSH 入栈，POP 出栈；
    任意时刻：SS:SP指向栈顶元素。SS存放栈顶的段地址，SP存放偏移地址；
    push ax的执行，由以下两步完成：
        （1）SP=SP-2，SS:SP指向当前栈顶前面的单元，以当前栈顶前面的单元为新的栈顶；
        （2）将ax中的内容送入SS:SP指向的内存单元处，SS:SP此时指向新栈顶；
    8086 CPU入栈时，栈顶从高地址向低地址方向增长；
    pop ax的执行过程和push ax刚好相反，由以下两步完成：
        （1）将SS:SP指向的内存单元的数据送入ax中；
        （2）SP=SP+2，SS:SP指向当前栈顶下面的单元，以当前栈顶下面的单元为新的栈顶；
     
3.8 栈顶的超界问题： 

3.9 push、pop指令：
    push、pop可以在寄存器和内存之间传递数据。具体格式如下：
        push    寄存器；
        pop     寄存器；
        push    段寄存器；
        pop     段寄存器；
        也可以在内存单元和内存单元之间传递数据：
        push    内存单元；
        pop     内存单元；
   
   
        
    
