1） 我么知道，计算机是进行数据处理、运算的机器，那么有两个基本问题包含在其中：
        1> 处理的数据在什么地方？
        2> 要处理的数据有多长？
        3> 定义的描述性符号：reg，表示一个寄存器；sreg，表示一个段寄存器；

8.1 bx、si、di、bp:
        1) 在8086CPU中，只有这4个寄存器可以用在"[...]"中来进行内存单元的寻址；
        2）在[...]中，这4个寄存器可以单个出现，或只能以四种组合出现：bx和si、bx和di、bp和si、bp和di;
        3) 只要在[...]中使用寄存器bp，而指令中没有显性地给出段地址，段地址就默认在ss中；

8.2 机器指令处理的数据所在位置：
        1）绝大部分机器指令都是进行数据处理的指令，处理大致可分为三类：读取、写入、运算。在机器指令这一层来讲，并不关心数据的值是多少，而关心指令
           执行前一刻，它将要处理的数据所在的位置。指令在执行前，所要处理的书籍可以在三个地方：CPU内部、内存、端口；

8.3 汇编语言中数据位置的表达：
        1）汇编语言中用三个概念来表达数据的位置：
                1> 立即数（idata）: 对于直接包含在机器指令中的数据，在汇编语言中称为：立即数，在汇编指令中直接给出；
                2> 寄存器：指令要处理的数据在寄存器中，在汇编指令中给出相应的寄存器名；
                3> 段地址（SA）和偏移地址（EA）：指令要处理的数据在内存中，在汇编指令中可以用[X]的格式给出EA, SA在某个段寄存器中；

8.4 寻址方式：
        1）当数据存放在内存中的时候，我们可以用多种方式来给定这个内存单元的偏移地址，这种定位内存单元的方法一般称为寻址方式；
        
8.5 指令要处理的数据有多长
        1）8086CPU的指令，可以处理两种尺寸的数据，byte和word。所以在机器指令中要指明指令进行的是字（word）操作还是字节（byte）操作：
                1> 通过寄存器名指明要处理的数据的尺寸；
                2> 在没有寄存器的情况下，用操作符X ptr指明内存单元的长度，X在汇编指令中可以为word或byte，例如：mov word ptr ds:[0], 1。
                    在没有寄存器参与内存单元的访问指令中，用word或byte ptr显性地指明所要访问的内存单元的长度是很必要的；
                3> 其他方法：有些指令默认了访问的是字单元还是字节单元，如push指令只进行字处理；
                
8.6 寻址方式的综合应用：

8.7 div指令：
        1）div是除法指令，使用div做除法的时候：
                1> 除数：有8位和16位两种，在一个寄存器或内存单元中；
                2> 被除数：默认放在AX或DX和AX中，如果除数为8位，被除数则为16位，默认在AX中存放；如果除数为16位，被除数则为32位，在DX和AX种存放，
                   DX存放高16位，AX存放低16位；
                3> 结果：如果除数为8位，则AL存储除法操作的商，AH存储除法操作的余数；如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数；

8.8 伪指令dd: 
        1) dd是用来定义dword(double word, 双字)型数据的；
                        
8.9 dup:
        1) dup是一个操作符，在汇编语言中通db、dw、dd等一样，也是由编译器识别处理的符号。它是和db、dw、dd等数据定义的伪指令配合使用的，用来进行
           数据的重复，例如：db 3 dup (0)，相当于db 0, 0, 0；
           
实验7 寻址方式在结构化数据访问中的应用

